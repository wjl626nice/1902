# 位运算
# 进制
'''
    10进制   遇10向前进1          每一位 【0, 9】
    2进制    遇2向前进1           每一位 【0, 1】

    10 - > 2

    60 -> 0011 1100
    13 -> 0000 1101

'''

a = 60
b = 13
# 按位 &
c = a & b
'''
    & 参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
    
    60 -> 0011 1100
    13 -> 0000 1101
    
          0000 1100
'''
print(c)

# 按位 |
d = a | b
'''
    | 参与运算的两个值,只要对应的二个二进位有一个为1时，结果位就为1。

    60 -> 0011 1100
    13 -> 0000 1101

          0011 1101
'''
print(d)

# 按位 ^
e = a ^ b
'''
    ^ 参与运算的两个值,当两对应的二进位相异时，结果为1	

    60 -> 0011 1100
    13 -> 0000 1101

          0011 0001
'''
print(e)

# 按位 ~
f = ~a
'''
    ^ 参与运算的两个值,对数据的每个二进制位取反,即把1变为0,把0变为1

    60 -> 0011 1100
          1100 0011
'''
print(f)

# 按位 <<
g = b << 2
'''
    ^ 参与运算的两个值,运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。

    13 -> 0000 1101
          0011 0100
'''
print(g)

# 按位 >>
h = b >> 2
'''
    ^ 参与运算的两个值,把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数

    13 -> 0000 1101
          0000 0011
'''
print(h)

# 位运算的使用场景 https://www.cnblogs.com/lyz1991/p/5801290.html

