    9、DJango的APP:
        project  ----> 项目
        APP      ----> 应用（研发子系统/java子系统）

        app应用是属于project项目，一个项目下可以有多个app应用，实现了不同业务之间的分离。

        创建app:
            1、终端：
                1、cd到项目根目录
                2、终端输入：python3 manage.py startapp app名字（自定义）
            2、PyCharm创建，在新建项目时选择Django 并且在more 更多设置app

        APP应用目录介绍：
            migrations ：关于数据操作类相关的记录
            admin.py:   Django自带的管理系统
            apps.py: 当前应用的相关配置
            models.py: 模型，使用orm操作时需要使用。
            tests.py: 测试文件
            views.py: uri对应的处理函数
        引入app应用 需要在settings配置文件中加入应用：
            找到INSTALLED_APPS,在它的列表尾部加入：
            '应用名'
            或
            'app02.apps.App02Config'  推荐
    10、ORM
        关系对象模型，通过对象操作的方式来操作数据库，无需会sql

        1、ORM本质
            类      ---->   数据库中的表
            对象    ---->   数据行
            属性    ---->   字段

        2、ORM能做的事：

            操作数据表   ---->   创建表/删除表/修改表

            操作数据行   ---->   数据的增删改查

            不能创建数据库，需要手动创建。

            创建表的流程：
                1、手动创建一个数据库
                2、在settings配置文件中配置数据库连接信息
                    DATABASES = {
                        'default': {
                            'ENGINE': 'django.db.backends.mysql',
                            'NAME': 'school',
                            'USER': 'root',
                            'PASSWORD': '123456',
                            'HOST': '127.0.0.1',
                            'PORT': 3306
                        }
                    }
                3、Django（2.2）中自带的数据库操作客户端模块，版本太低 需要升级。
                    1、通过PyCharm升级了
                    2、终端 pip3 install mysqlclient
                4、在app应用下的models.py中定义类，这个类必须继承models.Model
                    class 模型类(models.Model):
                        。。。。。
                5、模型类写好以后，需要执行才能创建（表，字段）：
                    1、终端cd 到项目根目录
                    2、python3 manage.py makemigrations #检查models.py中的所有改动，然后生成一个缓存文件，记录本次models.py文件中的更改
                    3、python3 manage.py migrate   自动的在数据库中同步 models.py中定义的结构（表）
            删除表操作：
                1、注释掉模型中对应的模型类
                2、python3 manage.py makemigrations #检查models.py中的所有改动，然后生成一个缓存文件，记录本次models.py文件中的更改
                   python3 manage.py migrate   自动的在数据库中同步 models.py中定义的结构（表）




