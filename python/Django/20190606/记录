四种标量类型：整数(int,integer) 、浮点（float）、布尔 (bool,boolean)，字符串（string）
根据time模块时间转换：时间戳   结构化时间   字符串时间
				   时间戳----->结构化时间---->字符串时间
				   mktime() 把指定的时间转成 时间戳
				   gmtime() 获取当前的结构化时间  
				   strftime() 把字符串时间 转换成 结构化时间
datetime模块

iterator 迭代器
iterable 可迭代的




12、路由系统
13、视图系统
14、模板
    Django模板
        常用的用法： 包在花括号中的都是标签
            只需要记住两类：{{ 变量相关操作 }} 、{%  逻辑相关操作 %}
        变量：
        	可以传多种类型的值。一般获取子元素在不模板中通常通过点”.“ 的方式获取。
        	如果变量的值不存在，那么会被模板引擎设置为空！
      	filter过滤：
      		通过使用filter来改变变量的值，然后输出。
      		语法：{{ value|filter_name:参数 }}
      		|管道符，把前边的内容作为参数交给后边处理
      		1、过滤器可以链式写{{ value|filter_name1:参数| filter_name2:参数|filter_name3:参数 ...}}
      		2、{{ value|filter_name:参数 }}  等同于  filter_name(value,参数)
      		3、管道符左右两侧不允许加空格


      	Django内置过滤函数：
      		1、default
      			value 为空或者为false时，使用指定的默认值。否则使用value的值
      			{{ value|default:'默认值' }}
      		2、length
      			返回value的长度
      			{{ value|length}}
      		3、filesizeformat
      			将字节处理成一般人都能看的懂的格式 **.kb  **.mb **.GB
      			{{ value|filesizeformat }}
      		4、slice
      			切片
      			{{ value|slice:"1:3" }}
      		5、date
      			格式化时间   value必须是datetime对象 
      			{{ value|date:'Y-m-d H:i:s' }}
      		6、safe 
      			Django的模板引擎会自动对标签值进行处理，把特殊符号转义，有的时候不想转义
      			可以使用safe函数：
      			{{ value|safe }}
      		7、truncatechars
      			根据指定的字符数对value进行截取，后边以...拼接
      			{{ value|truncatechars:3 }}
      		8、truncatewords
      			根据指定的单词数对value进行截取，后边以...拼接
				{{ value|truncatewords:2 }}
			9、cut
				删除指定的字符从value中
				{{ value|cut:'' }
			10、join
				把可迭代的对象拆分成字符串
				{{ value|join:'' }
			11、timesince
				计算两个时间的差，以友好的方式展示出来 几分  几天
				{{ 时间1|timesince:时间2}}
		Django自定义过滤函数：
			1、在对应的app应用目录下创建一个 templatetags文件夹
			2、在该文件夹下创建filter过滤器文件
			3、在该文件中引入 from django import template
			4、实例化一个注册对象  register = template.Library()
			5、定义个过滤器函数，然后在函数上边通过@register.filter(name="过滤器名字(在模板中使用的名字)") 装饰。
			6、在要使用的模板文件中引入过滤器文件。{% load 自定义过滤器名字 %}
			7、之间在映入下边使用自定义过滤器，重启整个django项目

		Django内置标签：
			for循环：
				{% for 临时变量 in 可迭代对象 %}
					{{ forloop }}
					{{ 临时变量 }}
				{% endfor %}
			for ... empty

				{% for 临时变量 in 可迭代对象 %}
					{{ forloop }}
					{{ 临时变量 }}
				{% empty %}
					可迭代对象为空时输出
				{% endfor %}

			if,elif和else
				{% if aab == 1 %}
					111
				{% elif aab == 2 %}
					222
				{% else %}
					没值了
				{% endif %}
			with
				给复杂的变量起一个别名，等号左右两侧不能有空格
				{% with  zpx=zhangpengxiang %}
				    {{ zpx }} {{ zpx|length }}
				{% endwith %}
				或
				{% with  zhangpengxiang as zpx %}
				    {{ zpx }} {{ zpx|length }}
				{% endwith %}

			csrf_token
				预防csrf攻击：本质就是生成一个随机的散列值，放到一个form表单的隐藏input内
				使用：在form表单中直接写 {% csrf_token %}
			注释：
				{# 注释内容 #}

			注意：在Django模板中不支持 {% if 3>1<3 %} 连续判断
				 字典的方法名和属性名重复时，并且在模板中被调用了。那么属性的优先级大于方法。


			母版：
				1、先定义母版，在母版中定义整体布局结构，然后定义块
				2、子模板继承母版，{% extends '母版名称' %}
				3、子模板中定义当前模板的内容块。通过 块名查找方式，替换掉母版中对应的块。
			
			块（block)：
				必须在母版中定义块，{% block 块名%}内容(可以有 也可以没有){% endblock%}
				然后在子模板中定义相同的块，然后替换母版中有同样名称的块。
				{% block title %}
				    出版社管理
				{% endblock %}

			组件 (include): 
				可以布局页面，把一个页面的各个部分 拆分到各个独立的子页面中。哪个模板需要就引入那些子页面。
				{% include '组件路径' %}

			静态文件
				单文件路径处理
					{% load static %}
					<img src="{% static 'images/1.jpg' %}" style="width: 50px;height: 50px;">
				多文件路径处理
					{% load static %}
					{% static 'images/1.jpg' as myabc %}
					<img src="{{ myabc }}" style="width: 50px;height: 50px;">
					<img src="{{ myabc }}" style="width: 50px;height: 50px;">
					<img src="{{ myabc }}" style="width: 50px;height: 50px;">
					<img src="{{ myabc }}" style="width: 50px;height: 50px;">
					<img src="{{ myabc }}" style="width: 50px;height: 50px;">
				自定义标签：simple_tag
				自定义包含标签：inclusion_tag












15、模型